pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    stages{

        stage("building docker image and pushing it to nexus"){
           steps{
               script{

               withCredentials([string(credentialsId: 'hub_pass', variable: 'docker_pass')]) {
                    sh '''

                   docker build -t dhafer96/springapp:${VERSION} .
                   docker login -u dhafer96 -p $docker_pass
                  docker push  dhafer96/springapp:${VERSION}
                  docker rmi dhafer96/springapp:${VERSION}  
                  docker image prune -f      
                  '''
                  }
                }
              }
           }

      stage('indentifying misconfigs using datree in helm charts'){
            steps{
                script{

                    dir('kubernetes/') {
                        withEnv(['DATREE_TOKEN=b57804aa-a905-4a46-a77e-aec6c0fd9b86']) {
                              sh 'helm datree test myapp/'
                        }
                    }
                }
            }
        }




        stage('Deploying application on k8s cluster') {
            steps {
               script{
                   withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                        dir('kubernetes/') {
                            
                          sh 'helm upgrade --install --set image.repository="dhafer96/springapp" --set image.tag="${VERSION}" myjavaapp myapp/ ' 
                        }
                    }
               }
            }
        }
        
        
           stage('verifying app deployment'){
            steps{
                script{
                     withCredentials([kubeconfigFile(credentialsId: 'kubernetes-config', variable: 'KUBECONFIG')]) {
                         sh '''
                 
                         chmod +x healthcheck.sh
                         ./healthcheck.sh
                         '''

                     }
                }
            }
        }
    

    }
    
}
